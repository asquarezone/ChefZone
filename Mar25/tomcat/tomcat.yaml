---
- name: install tomcat on ubuntu server
  hosts: appservers
  become: yes
  tasks:
    - name: update packages and install java
      ansible.builtin.package:
        name: "{{ java_package_name }}"
        state: present
    - name: Ensure group tomcat exists
      ansible.builtin.group:
        name: "{{ tomcat_system_groupname }}"
        state: present
    - name: create tomcat user
      ansible.builtin.user:
        name: "{{ tomcat_system_username }}"
        system: yes
        create_home: yes
        group: "{{ tomcat_system_groupname }}"
        home: "{{ tomcat_homedir }}"
        shell: "{{ tomcat_shell }}"
    - name: check if it is necessary to download tomcat
      ansible.builtin.stat:
        path: "{{ tomcat_homedir }}/{{ tomcat_version }}"
      register: version_stat
    - name: print version_stat
      debug:
        var: version_stat
    - name: download tomcat
      ansible.builtin.unarchive:
        src: "{{ tomcat_download_url }}"
        dest: "{{ tomcat_homedir }}"
        remote_src: yes
        owner: "{{ tomcat_system_username }}"
        group: "{{ tomcat_system_groupname }}"
        extra_opts:
          - --strip-components=1
      when: version_stat.stat.exists == false
    - name: Find script files
      ansible.builtin.find:
        paths: "{{ tomcat_homedir }}/bin/"
        patterns: '*.sh'
      register: script_files
    - name: changing shell file permissions
      ansible.builtin.file:
        path: "{{ item.path }}"
        mode: '0753'
      loop: "{{ script_files.files }}"
      notify:
        - create work done file
    - name: copy the service file
      ansible.builtin.template:
        src: templates/tomcat.service.j2
        dest: /etc/systemd/system/tomcat.service
      notify:
        - restart tomcat
    - name: create tomcat admin user for management
      ansible.builtin.template:
        src: templates/tomcat-users.xml.j2
        dest: "{{ tomcat_homedir }}/conf/tomcat-users.xml"
        owner: "{{ tomcat_system_username }}"
        group: "{{ tomcat_system_groupname }}"
      notify:
        - restart tomcat
    - name: allow access for manager app
      ansible.builtin.template:
        src: templates/context.xml.j2
        dest: "{{ tomcat_homedir }}/webapps/manager/META-INF/context.xml"
        owner: "{{ tomcat_system_username }}"
        group: "{{ tomcat_system_groupname }}"
      notify:
        - restart tomcat
    - name: allow access for host manager
      ansible.builtin.template:
        src: templates/context.xml.j2
        dest: "{{ tomcat_homedir }}/webapps/host-manager/META-INF/context.xml"
      notify:
        - restart tomcat
    - name: ensure tomcat is enabled and started
      ansible.builtin.systemd_service:
        name: tomcat
        enabled: yes
        state: started
    - name: deploy application
      ansible.builtin.get_url:
        url: "{{ application_download_url }}"
        dest: "{{ tomcat_homedir }}/webapps/{{ application_name }}"
      notify:
        - restart tomcat
  handlers:
    - name: create work done file
      ansible.builtin.file:
        path: "{{ tomcat_homedir }}/{{ tomcat_version }}"
        state: "touch"
    - name: restart tomcat
      ansible.builtin.systemd_service:
        name: tomcat
        daemon_reload: yes
        state: restarted
      
    
